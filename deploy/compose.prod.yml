services:
  backend:
    image: erasadmin/eras-be:${BE_VERSION}
    ports:
      - "${BACKEND_PORT}:443"
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

      # Database Connection
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - /app/node_modules
      - /home/ubuntu/ssl-certificates/eras-backend.pfx:/https/aspnetapp.pfx:ro
    depends_on:
      database:
        condition: service_healthy
    networks:
      - eras_network
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: '400M'

  frontend:
    image: erasadmin/eras-fe:${FE_VERSION}
    ports:
      - "${FRONTEND_PORT}:80"
      - "443:443"
    networks:
      - eras_network
    depends_on:
      - backend
    volumes:
      - /home/ubuntu/ssl-certificates/nginx.conf:/etc/nginx/conf.d/default.conf
      - /home/ubuntu/ssl-certificates/eras.crt:/etc/nginx/ssl/eras.crt
      - /home/ubuntu/ssl-certificates/eras.key:/etc/nginx/ssl/eras.key
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: '200M'

  database:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - eras_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eras_user -d eras_db || exit 1"]
      interval: ${POSTGRES_HEALTHCHECK_INTERVAL}
      timeout: ${POSTGRES_HEALTHCHECK_TIMEOUT}
      retries: ${POSTGRES_HEALTHCHECK_RETRIES}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: '400M'

networks:
  eras_network: